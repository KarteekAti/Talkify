scalar Date

type SearchedUser {
  id: String
  username: String
  image: String
}

type User {
  id: String
  name: String
  username: String
  email: String
  emailVerified: String
  image: String
}

type Query {
  searchUsers(username: String!): [SearchedUser]
  conversations: [Conversation!]!
}

type Mutation {
  createUsername(username: String!): CreateUsernameResponse
  createConversation(participantsIds: [String!]!): CreateConversationResponse
}

type Subscription {
  conversationCreated: Conversation
}

type Conversation {
  id: String
  lastestMessage: Message
  participants: [Paricipant]
  createdAt: Date
  updatedAt: Date
}

type Message {
  id: String
  sender: User
  body: String
  createdAt: Date
}

type Paricipant {
  id: String
  user: User
  hasSeenLatestMessage: Boolean
}

type CreateUsernameResponse {
  success: Boolean
  error: String
}

type CreateConversationResponse {
  conversationId: String
}
